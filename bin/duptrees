#!/usr/bin/env ruby

dir = File.dirname(File.dirname(File.expand_path(__FILE__)))
libpath = dir + "/lib"
$:.unshift libpath

require 'dupless/tree/nodes'
require 'dupless/tree/visitor'
require 'dupless/tree/tree'
require 'dupless/io/fdprocessor'
require 'dupless/tree/nodes'
require 'dupless/io/println'
require 'dupless/util/ticker'
require 'logue'

Logue::Log::level = Logue::Level::INFO

# about to write Ragol again ...
class DuptreeOptions
  attr_reader :min_height
  attr_reader :max_matches
  
  def initialize args
    @args = args
    @min_height = 3
    @max_matches = nil
  end

  def consume_option_int idx
    @args.delete_at idx
    @args[idx].to_i.tap do |value|
      @args.delete_at idx
    end
  end
  
  def process
    idx = 0
    while idx + 1 < @args.size
      if @args[idx] == "--height"
        @min_height = consume_option_int idx
      elsif @args[idx] == "--matches"
        @max_matches = consume_option_int idx
      else
        break
      end
    end
  end
end

class DuptreeWriter
  include Println
  
  def initialize 
    @x = nil
  end

  def write x, y
    if @x.nil?
      println "x", x
      println "height", x.height
      @x = x
    end
    println "y", y
  end

  def close
    if @x
      puts
    end
  end
end

class DuptreeQuoteWriter
  include Println
  
  def initialize 
    @x = nil
  end

  def write x, y
    if @x.nil?
      println "height", x.height
      puts "\"#{x}\""
      @x = x
    end
    puts "\"#{y}\""
  end

  def close
    if @x
      puts
    end
  end
end

class DuptreesApp < Dupless::TreeNodes::Visitor
  include Println
  
  def initialize args
    @dirs = Array.new
    println "args", args
    @options = DuptreeOptions.new args
    @options.process
    println "max_matches", @options.max_matches
    println "min_height", @options.min_height
    factory = Dupless::TreeNodes::NodeFactory.new
    @ticker = Ticker.new 10_000
    nodes = args.collect do |arg|
      factory.create arg
    end
    println "# nodes", nodes.size
    super(*nodes)
    @ticker.write_elapsed
    puts
  end

  def process_directory dir
    @ticker.tick
    if dir.height > @options.min_height
      @dirs << dir
      super
    end
  end

  def filter_dirs
    puts "filter dirs"
    println "# dirs", @dirs.size
    t = Ticker.new 10_000
    @filtered = Hash.new { |h, k| h[k] = Array.new }.tap do |h|
      @dirs.each do |dir|
        t.tick
        ht = dir.height
        count = dir.count
        h[ht] << dir
      end
      t.write_elapsed
    end
  end

  def process_dups
    puts "process dups"
    println "# filtered", @filtered.size
    t = Ticker.new 500
    obj = Dupless::TreeNodes::Matcher.new
    matches = 0
    @filtered.sort.reverse.each do |key, dirs|
      (0 ... dirs.size).each do |i|
        t.tick
        x = dirs[i]
        writer = DuptreeQuoteWriter.new
        (i + 1 ... dirs.size).each do |j|
          # sdt.tick
          y = dirs[j]
          if obj.match x, y
            writer.write x, y
            matches += 1
            if @options.max_matches && matches >= @options.max_matches
              t.write_elapsed
              return
            end
          end
        end
        writer.close
      end
    end
    t.write_elapsed
  end

  def write
  end
end

obj = DuptreesApp.new ARGV
obj.filter_dirs
obj.process_dups
obj.write
