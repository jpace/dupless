#!/usr/bin/env ruby

dir = File.dirname(File.dirname(File.expand_path(__FILE__)))
libpath = dir + "/lib"
$:.unshift libpath

require 'dupless/file'
require 'dupless/fdprocessor'
require 'dupless/set/factory'
require 'dupless/entry'
require 'dupless/cache'
require 'dupless/directories'
require 'dupless/matcher'
require 'logue'

Logue::Log::level = Logue::Level::INFO

module Dupless
  class App < FileDirProcessor
    include Logue::Loggable
    
    def initialize(*args, type: :singlepass, cachename: nil)
      cachename ||= "/tmp/dupless.yaml"
      cache = Cache.instance
      cache.set cachename
      sf = Set::Factory.new
      info "type: #{type}"
      @set = sf.set type: type
      super(*args)
      @set.run
      info "writing: #{self}"
      cache.write
    end

    def process_file file 
      df = Dupless::File.new file
      @set << df
    end

    def show_duplicate_directories
      filter = [
        Dupless::Match::Identical
      ]
      dirs = @set.directories
#      puts "dirs: #{dirs}"
      dups = Dupless::Directories.new(dirs).duplicates filter: nil
      puts "dups: #{dups}"
      
#      dirs = @set.duplicate_directories
      # puts "dirs: #{dirs}"
    end

    def show_duplicate_files
      dups = @set.duplicates
      puts "#dups: #{dups.size}"
      # return if true
      dups.each_with_index do |dup, idx|
        puts
        # puts "idx: #{idx}"
        dup.print format: :short
      end
      puts
    end
  end
end

type = :sorted_by_size
output = :files
cache = nil

args = Array.new
ARGV.each_with_index do |arg, idx|
  case arg
  when "-s", "--sorted-by-size"
    type = :sorted_by_size
  when "-1", "--singlepass"
    type = :singlepass
  when "-2", "--twopass"
    type = :twopass
  when "--directories", "-d"
    output = :directories
  when "--files", "-f"
    output = :files
  when "--cache"
    cache = ARGV[idx + 1]
    ARGV[idx + 1] = nil
  when nil
  # ignore
  else
    args << arg
  end
end

app = Dupless::App.new args, type: type, cachename: cache
if output == :directories
  app.show_duplicate_directories
else
  app.show_duplicate_files
end
