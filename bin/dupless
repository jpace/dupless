#!/usr/bin/env ruby

dir = File.dirname(File.dirname(File.expand_path(__FILE__)))
libpath = dir + "/lib"
$:.unshift libpath

require 'dupless/file/file'
require 'dupless/fdprocessor'
require 'dupless/set/factory'
require 'dupless/file/cache'
require 'dupless/file/format'
require 'dupless/dir/directories'
require 'dupless/dir/matcher'
require 'dupless/dir/matcher2'
require 'dupless/dir/match/format'
require 'logue'

Logue::Log::level = Logue::Level::INFO

module Dupless
  class App < FileDirProcessor
    include Logue::Loggable
    
    def initialize(*args, type: :singlepass, cachename: nil)
      cachename ||= "/tmp/dupless.yaml"
      cache = Cache.instance
      cache.set cachename
      sf = Set::Factory.new
      info "type: #{type}"
      @set = sf.set type: type
      super(*args)
      @set.run
      info "writing: #{self}"
      cache.write
    end

    def process_file file 
      df = Dupless::File.new file
      @set << df
    end

    def show_duplicate_directories filter: nil, formatter: nil
      dirs = @set.matchdirs
      matcher = Dupless::Matcher2.new dirs
      matcher.duplicates filter: filter, formatter: formatter
#      info "dups: #{dups}"
    end

    def show_duplicate_directories_orig filter: nil, formatter: nil
      dirs = @set.directories
      puts "dirs: #{dirs.class}"
      
      Dupless::Directories.new(dirs).duplicates_orig filter: filter, formatter: formatter
#      puts "dups: #{dups}"
      
#      dirs = @set.duplicate_directories
      # puts "dirs: #{dirs}"
    end

    def show_duplicate_files formatter: nil
      dups = @set.duplicates
      puts "#dups: #{dups.size}"
      dups.each_with_index do |dup, idx|
        puts "dup: #{dup.class}"
        puts
        dup.write formatter: formatter
      end
      puts
    end
  end
end

type = :sorted_by_size
output = :files
cache = nil
filter = Array.new
impl = :show_duplicate_directories
matchformat = Dupless::Match::BriefFormatter.new
fileformat = Dupless::Files::BriefFormatter.new

args = Array.new
ARGV.each_with_index do |arg, idx|
  case arg
  when "-s", "--sorted-by-size"
    type = :sorted_by_size
  when "-1", "--singlepass"
    type = :singlepass
  when "-2", "--twopass"
    type = :twopass
  when "--directories", "-d"
    output = :directories
  when "--files", "-f"
    output = :files
  when "--cache"
    cache = ARGV[idx + 1]
    ARGV[idx + 1] = nil
  when "--identical"
    filter << Dupless::Match::Identical
  when "--contains"
    filter << Dupless::Match::XContainsY
  when "--orig"
    impl = :show_duplicate_directories_orig
  when nil
  # ignore
  else
    args << arg
  end
end

app = Dupless::App.new args, type: type, cachename: cache
if output == :directories
  app.send impl, filter: filter, formatter: matchformat
else
  app.show_duplicate_files formatter: fileformat
end
