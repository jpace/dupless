#!/usr/bin/env ruby

dir = File.dirname(File.dirname(File.expand_path(__FILE__)))
libpath = dir + "/lib"
$:.unshift libpath

require 'dupless/file'
require 'dupless/fdprocessor'
require 'dupless/set/factory'
require 'dupless/entry'
require 'dupless/cache'
require 'dupless/directories'
require 'logue'

Logue::Log::level = Logue::Level::INFO

module Dupless
  class App < FileDirProcessor
    include Logue::Loggable
    
    def initialize(*args, type: :singlepass)
      sf = Set::Factory.new
      info "type: #{type}"
      @set = sf.set type: type
      super(*args)
      @set.run
      info "writing: #{self}"
      Cache.instance.write
    end

    def process_file file 
      df = Dupless::File.new file
      @set << df
    end

    def show_duplicate_directories
      dirs = @set.duplicate_directories
      # puts "dirs: #{dirs}"
    end

    def show_duplicate_files
      dups = @set.duplicates
      puts "#dups: #{dups.size}"
      # return if true
      dups.each_with_index do |dup, idx|
        puts "idx: #{idx}"
        dup.print
      end
      puts
    end
  end
end

type = :sorted_by_size

args = Array.new
ARGV.each do |arg|
  case arg
  when "-s", "--sorted-by-size"
    type = :sorted_by_size
  when "-1", "--singlepass"
    type = :singlepass
  when "-2", "--twopass"
    type = :twopass
  else
    args << arg
  end
end

app = Dupless::App.new args, type: type
app.show_duplicate_directories
